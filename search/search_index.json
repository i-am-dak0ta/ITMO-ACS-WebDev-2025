{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432 \u0410\u0440\u0442\u0443\u0440 K3340 WEB 2.1","text":""},{"location":"labs/lr-1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":""},{"location":"practices/pr-1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.1. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Pydantic \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0430\u0432\u0442\u043e\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"practices/pr-1/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"practices/pr-1/#_2","title":"\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 <code>main.py</code> \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u044b: <code>temp_bd</code> \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 <code>professions</code> \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439.</p> <pre><code>professions = [  \n    {  \n        \"id\": 1,  \n        \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",  \n        \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\",  \n    }  \n]  \n\ntemp_bd = [  \n    {  \n        \"id\": 1,  \n        \"race\": \"director\",  \n        \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",  \n        \"level\": 12,  \n        \"profession\": {  \n            \"id\": 1,  \n            \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",  \n            \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"  \n        },  \n        \"skills\":  \n            [{  \n                \"id\": 1,  \n                \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",  \n                \"description\": \"\"  \n            },  \n                {  \n                    \"id\": 2,  \n                    \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",  \n                    \"description\": \"\"  \n                }]  \n    },  \n    {  \n        \"id\": 2,  \n        \"race\": \"worker\",  \n        \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",  \n        \"level\": 12,  \n        \"profession\": {  \n            \"id\": 1,  \n            \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",  \n            \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"  \n        },  \n        \"skills\": []  \n    },  \n]\n</code></pre>"},{"location":"practices/pr-1/#pydantic","title":"\u041c\u043e\u0434\u0435\u043b\u0438 Pydantic","text":"<p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>models.py</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>from enum import Enum  \nfrom typing import Optional, List  \n\nfrom pydantic import BaseModel  \n\n\nclass RaceType(Enum):  \n    director = \"director\"  \n    worker = \"worker\"  \n    junior = \"junior\"  \n\n\nclass Profession(BaseModel):  \n    id: int  \n    title: str  \n    description: str  \n\n\nclass Skill(BaseModel):  \n    id: int  \n    name: str  \n    description: str  \n\n\nclass Warrior(BaseModel):  \n    id: int  \n    race: RaceType  \n    name: str  \n    level: int  \n    profession: Profession  \n    skills: Optional[List[Skill]] = []\n</code></pre>"},{"location":"practices/pr-1/#_3","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432 \u0432 <code>main.py</code>:</p> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e\u0438\u043d\u043e\u0432:</li> </ul> <pre><code>@app.get(\"/warriors_list\")  \ndef warriors_list() -&gt; List[Warrior]:  \n    return temp_bd\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.get(\"/warrior/{warrior_id}\")  \ndef warriors_get(warrior_id: int) -&gt; List[Warrior]:  \n    return [warrior for warrior in temp_bd if warrior.get(\"id\") == warrior_id]\n</code></pre> <ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.post(\"/warrior\")  \ndef warriors_create(warrior: Warrior):  \n    warrior_to_append = warrior.model_dump()  \n    temp_bd.append(warrior_to_append)  \n    return {\"status\": 200, \"data\": warrior}\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.delete(\"/warrior/delete/{warrior_id}\")\ndef warrior_delete(warrior_id: int):\n    for i, warrior in enumerate(temp_bd):\n        if warrior.get(\"id\") == warrior_id:\n            temp_bd.pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.put(\"/warrior/{warrior_id}\")  \ndef warrior_update(warrior_id: int, warrior: Warrior) -&gt; List[Warrior]:  \n    for war in temp_bd:  \n        if war.get(\"id\") == warrior_id:  \n            warrior_to_append = warrior.model_dump()  \n            temp_bd.remove(war)  \n            temp_bd.append(warrior_to_append)  \n    return temp_bd\n</code></pre>"},{"location":"practices/pr-1/#_4","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439 \u0432 <code>main.py</code>:</p> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439:</li> </ul> <pre><code>@app.get(\"/professions_list\")  \ndef profession_list() -&gt; List[Profession]:  \n    return professions\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.get(\"/professions/{profession_id}\")  \ndef profession_get(profession_id: int) -&gt; List[Profession]:  \n    return [profession for profession in professions if profession.get(\"id\") == profession_id]\n</code></pre> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.post(\"/professions\")  \ndef profession_create(profession: Profession):  \n    profession_dict = profession.model_dump()  \n    professions.append(profession_dict)  \n    return {\"status\": 200, \"data\": profession}\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.delete(\"/professions/delete/{profession_id}\")  \ndef profession_delete(profession_id: int):  \n    for i, profession in enumerate(professions):  \n        if profession.get(\"id\") == profession_id:  \n            professions.pop(i)  \n            break  \n    return {\"status\": 201, \"data\": \"deleted\"}\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.put(\"/professions/{profession_id}\")  \ndef profession_update(profession_id: int, profession: Profession) -&gt; List[Profession]:  \n    for prof in professions:  \n        if prof.get(\"id\") == profession_id:  \n            profession_to_append = profession.model_dump()  \n            professions.remove(prof)  \n            professions.append(profession_to_append)  \n    return professions\n</code></pre>"},{"location":"practices/pr-1/#_5","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e FastAPI:</p> <p></p>"},{"location":"practices/pr-2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.2. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SQLModel \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 PostgreSQL. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432, \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439, \u0443\u043c\u0435\u043d\u0438\u0439 \u0438 \u0438\u0445 \u0441\u0432\u044f\u0437\u0435\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438. \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439 \u0438 \u0443\u043c\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u043e\u0438\u043d\u0430. \u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"practices/pr-2/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"practices/pr-2/#_2","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>connection.py</code> \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a PostgreSQL:</p> <pre><code>from sqlmodel import SQLModel, Session, create_engine  \n\ndb_url = \"postgresql://postgres:123123@localhost/warriors_db\"  \nengine = create_engine(db_url, echo=True)  \n\n\ndef init_db():  \n    SQLModel.metadata.create_all(engine)  \n\n\ndef get_session():  \n    with Session(engine) as session:  \n        yield session\n</code></pre> <p>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 <code>main.py</code> \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>@app.on_event(\"startup\")  \ndef on_startup():  \n    init_db()\n</code></pre>"},{"location":"practices/pr-2/#sqlmodel","title":"\u041c\u043e\u0434\u0435\u043b\u0438 SQLModel","text":"<p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>models.py</code> \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0441\u0432\u044f\u0437\u0435\u0439:</p> <ul> <li>\u0412\u043e\u0438\u043d \u0438 \u043e\u0442\u0432\u0435\u0442 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438:</li> </ul> <pre><code>class WarriorDefault(SQLModel):  \n    race: RaceType  \n    name: str  \n    level: int  \n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")  \n\n\nclass Warrior(WarriorDefault, table=True):  \n    id: int = Field(default=None, primary_key=True)  \n    profession: Optional[Profession] = Relationship(  \n        back_populates=\"warriors_prof\",  \n        sa_relationship_kwargs={\"lazy\": \"joined\"},  \n    )  \n\n    skills: Optional[List[Skill]] = Relationship(  \n        back_populates=\"warriors\",  \n        link_model=SkillWarriorLink,  \n        sa_relationship_kwargs={\"uselist\": True, \"lazy\": \"selectin\"},  \n    )\n\nclass WarriorProfessions(WarriorDefault):  \n    profession: Optional[Profession] = None  \n\n\nclass WarriorResponse(WarriorProfessions):  \n    id: int  \n    skills: List[Skill]\n</code></pre> <ul> <li>\u041f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f:</li> </ul> <pre><code>class ProfessionDefault(SQLModel):  \n    title: str  \n    description: str  \n\nclass Profession(ProfessionDefault, table=True):  \n    id: int = Field(default=None, primary_key=True)  \n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\n</code></pre> <ul> <li>\u0423\u043c\u0435\u043d\u0438\u0435 \u0438 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430:</li> </ul> <pre><code>class SkillWarriorLink(SQLModel, table=True):  \n    skill_id: Optional[int] = Field(  \n        default=None, foreign_key=\"skill.id\", primary_key=True  \n    )  \n    warrior_id: Optional[int] = Field(  \n        default=None, foreign_key=\"warrior.id\", primary_key=True  \n    )  \n\n\nclass SkillDefault(SQLModel):  \n    name: str  \n    description: Optional[str] = \"\"  \n\n\nclass Skill(SkillDefault, table=True):  \n    id: int = Field(default=None, primary_key=True)  \n    warriors: Optional[List[\"Warrior\"]] = Relationship(  \n        back_populates=\"skills\",  \n        link_model=SkillWarriorLink  \n    )\n</code></pre>"},{"location":"practices/pr-2/#_3","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u043e\u0432","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 <code>main.py</code>:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.post(\"/warrior\")  \ndef warriors_create(warrior: WarriorDefault, session=Depends(get_session)):  \n    warrior = Warrior.model_validate(warrior)  \n    session.add(warrior)  \n    session.commit()  \n    session.refresh(warrior)  \n    return {\"status\": 200, \"data\": warrior}\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043e\u0438\u043d\u043e\u0432:</li> </ul> <pre><code>@app.get(\"/warriors_list\")  \ndef warriors_list(session=Depends(get_session)) -&gt; List[Warrior]:  \n    return session.exec(select(Warrior)).all()\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430 \u0441 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0435\u0439 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438:</li> </ul> <pre><code>@app.get(\"/warrior/{warrior_id}\", response_model=WarriorResponse)  \ndef warriors_get(warrior_id: int, session=Depends(get_session)) -&gt; Warrior:  \n    warrior = session.get(Warrior, warrior_id)  \n    return warrior\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.patch(\"/warrior/{warrior_id}\")  \ndef warrior_update(  \n        warrior_id: int, warrior: WarriorDefault, session=Depends(get_session)  \n) -&gt; WarriorDefault:  \n    db_warrior = session.get(Warrior, warrior_id)  \n    if not db_warrior:  \n        raise HTTPException(status_code=404, detail=\"Warrior not found\")  \n\n    warrior_data = warrior.model_dump(exclude_unset=True)  \n    for key, value in warrior_data.items():  \n        setattr(db_warrior, key, value)  \n\n    session.add(db_warrior)  \n    session.commit()  \n    session.refresh(db_warrior)  \n    return db_warrior\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0438\u043d\u0430:</li> </ul> <pre><code>@app.delete(\"/warrior/{warrior_id}\")  \ndef warrior_delete(warrior_id: int, session=Depends(get_session)):  \n    warrior = session.get(Warrior, warrior_id)  \n    if not warrior:  \n        raise HTTPException(status_code=404, detail=\"Warrior not found\")  \n    session.delete(warrior)  \n    session.commit()  \n    return {\"ok\": True}\n</code></pre>"},{"location":"practices/pr-2/#_4","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439","text":"<ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439:</li> </ul> <pre><code>@app.get(\"/professions_list\")  \ndef professions_list(session=Depends(get_session)) -&gt; List[Profession]:  \n    return session.exec(select(Profession)).all()\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.get(\"/profession/{profession_id}\")  \ndef profession_get(profession_id: int, session=Depends(get_session)) -&gt; Profession:  \n    return session.get(Profession, profession_id)\n</code></pre> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438:</li> </ul> <pre><code>@app.post(\"/profession\")  \ndef profession_create(prof: ProfessionDefault, session=Depends(get_session)):  \n    prof = Profession.model_validate(prof)  \n    session.add(prof)  \n    session.commit()  \n    session.refresh(prof)  \n    return {\"status\": 200, \"data\": prof}\n</code></pre>"},{"location":"practices/pr-2/#_5","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u0438\u0439","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u0445 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a \u0432\u043e\u0438\u043d\u0430\u043c:</p> <ul> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u044f:</li> </ul> <pre><code>@app.post(\"/skill\")  \ndef skills_create(skill: SkillDefault, session=Depends(get_session)):  \n    skill = Skill.model_validate(skill)  \n    session.add(skill)  \n    session.commit()  \n    session.refresh(skill)  \n    return {\"status\": 200, \"data\": skill}\n</code></pre> <ul> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u043c\u0435\u043d\u0438\u0439:</li> </ul> <pre><code>@app.get(\"/skills_list\")  \ndef skills_list(session=Depends(get_session)) -&gt; List[Skill]:  \n    return session.exec(select(Skill)).all()\n</code></pre> <ul> <li>\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u044f:</li> </ul> <pre><code>@app.patch(\"/skill/{skill_id}\")  \ndef skill_update(  \n        skill_id: int, skill: SkillDefault, session=Depends(get_session)  \n) -&gt; SkillDefault:  \n    db_skill = session.get(Skill, skill_id)  \n    if not db_skill:  \n        raise HTTPException(status_code=404, detail=\"Skill not found\")  \n\n    skill_data = skill.model_dump(exclude_unset=True)  \n    for key, value in skill_data.items():  \n        setattr(db_skill, key, value)  \n\n    session.add(db_skill)  \n    session.commit()  \n    session.refresh(db_skill)  \n    return db_skill\n</code></pre> <ul> <li>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0443\u043c\u0435\u043d\u0438\u044f:</li> </ul> <pre><code>@app.delete(\"/skill/{skill_id}\")  \ndef skill_delete(skill_id: int, session=Depends(get_session)):  \n    skill = session.get(Skill, skill_id)  \n    if not skill:  \n        raise HTTPException(status_code=404, detail=\"Skill not found\")  \n    session.delete(skill)  \n    session.commit()  \n    return {\"ok\": True}\n</code></pre> <ul> <li>\u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u0443\u043c\u0435\u043d\u0438\u044f \u043a \u0432\u043e\u0438\u043d\u0443:</li> </ul> <pre><code>@app.post(\"/skill_warriors\")  \ndef warrior_skill_add(skill_warrior: SkillWarriorLink, session=Depends(get_session)):  \n    skill = session.get(Skill, skill_warrior.skill_id)  \n    if not skill:  \n        raise HTTPException(status_code=404, detail=\"Skill not found\")  \n\n    warrior = session.get(Warrior, skill_warrior.warrior_id)  \n    if not warrior:  \n        raise HTTPException(status_code=404, detail=\"Warrior not found\")  \n\n    if skill not in warrior.skills:  \n        session.add(skill_warrior)  \n        session.commit()  \n\n    return {\"ok\": True}\n</code></pre>"},{"location":"practices/pr-2/#_6","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e FastAPI. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0434\u043b\u044f \u0432\u043e\u0438\u043d\u0430:</p> <p></p> <p></p>"},{"location":"practices/pr-3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1.3. \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 FastAPI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Alembic \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL. \u0414\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 <code>.env</code>, \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u043b \u0438\u0445 \u0438\u0437 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>.gitignore</code> \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f <code>level</code> \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>SkillWarriorLink</code>. \u0412\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>127.0.0.1:8000/docs</code>.</p>"},{"location":"practices/pr-3/#_1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c","text":""},{"location":"practices/pr-3/#alembic","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 Alembic","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b Alembic \u0438 \u0441\u043e\u0437\u0434\u0430\u043b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439:</li> </ol> <pre><code>pip install alembic\nalembic init migrations\n</code></pre> <ol> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>alembic.ini</code> \u0443\u043a\u0430\u0437\u0430\u043b URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</li> </ol> <pre><code>sqlalchemy.url = ${DB_ADMIN}\n</code></pre> <ol> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>migrations/env.py</code> \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043b \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b <code>target_metadata</code>:</li> </ol> <pre><code>from models import *\ntarget_metadata = SQLModel.metadata\n</code></pre> <ol> <li>\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u043e\u043b\u0435 <code>level</code> \u0432 \u043c\u043e\u0434\u0435\u043b\u044c <code>SkillWarriorLink</code> \u0432 <code>models.py</code>:</li> </ol> <pre><code>class SkillWarriorLink(SQLModel, table=True):\n   skill_id: Optional[int] = Field(default=None, foreign_key=\"skill.id\", primary_key=True)\n   warrior_id: Optional[int] = Field(default=None, foreign_key=\"warrior.id\", primary_key=True)\n   level: int | None\n</code></pre> <ol> <li>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044e:</li> </ol> <pre><code>alembic revision --autogenerate -m \"skill added\"\nalembic upgrade head\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 <code>migrations/versions/581f1991df9d_skill_added.py</code>:</p> <pre><code>def upgrade() -&gt; None:  \n    \"\"\"Upgrade schema.\"\"\"  \n    # ### commands auto generated by Alembic - please adjust! ###  \n    op.add_column('skillwarriorlink', sa.Column('level', sa.Integer(), nullable=True))  \n    # ### end Alembic commands ###  \n\n\ndef downgrade() -&gt; None:  \n    \"\"\"Downgrade schema.\"\"\"  \n    # ### commands auto generated by Alembic - please adjust! ###  \n    op.drop_column('skillwarriorlink', 'level')  \n    # ### end Alembic commands ###\n</code></pre>"},{"location":"practices/pr-3/#env","title":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f (.env)","text":"<p>\u0412 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043b \u0444\u0430\u0439\u043b <code>.env</code> \u0441 URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>DB_ADMIN=postgresql://postgres:123123@localhost/warriors_db\n</code></pre> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u043b <code>connection.py</code> \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>import os\nfrom dotenv import load_dotenv\nfrom sqlmodel import SQLModel, Session, create_engine  \n\nload_dotenv()\ndb_url = os.getenv('DB_ADMIN')\nengine = create_engine(db_url, echo=True)  \n\ndef init_db():  \n    SQLModel.metadata.create_all(engine)  \n\ndef get_session():  \n    with Session(engine) as session:  \n        yield session\n</code></pre>"},{"location":"practices/pr-3/#git-gitignore","title":"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 Git (.gitignore)","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043b \u0444\u0430\u0439\u043b <code>.gitignore</code> \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c <code>.env</code> \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b:</p> <pre><code>.idea  \n.ipynb_checkpoints  \n.mypy_cache  \n.vscode  \n__pycache__  \n.pytest_cache  \nhtmlcov  \ndist  \nsite  \n.coverage  \ncoverage.xml  \n.netlify  \ntest.db  \nlog.txt  \nPipfile.lock  \nenv3.*  \nenv  \nenv.py  \ndocs_build  \nsite_build  \nvenv  \ndocs.zip  \narchive.zip  \n\n# vim temporary files  \n*~  \n.*.sw?  \n.cache  \n\n# macOS  \n.DS_Store\n</code></pre>"},{"location":"practices/pr-3/#_2","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":"<p>\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0430, \u043f\u043e\u043b\u0435 <code>level</code> \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>SkillWarriorLink</code>.</p> <p></p>"}]}